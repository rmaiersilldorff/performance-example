/**
 * OpenAPI definition
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext} from '@angular/common/http';
import {CustomHttpParameterCodec} from '../encoder';
import {Observable} from 'rxjs';

// @ts-ignore
import {ChangeAngebotQueryDto} from '../model/changeAngebotQueryDto';
// @ts-ignore
import {PageDtoAngebotDetailsDto} from '../model/pageDtoAngebotDetailsDto';
// @ts-ignore
import {SearchAngebotQueryDto} from '../model/searchAngebotQueryDto';

// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';
import {BaseService} from '../api.base.service';

@Injectable({
    providedIn: 'root',
})
export class AngebotService extends BaseService {
    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string | string[],
        @Optional() configuration?: Configuration,
    ) {
        super(basePath, configuration);
    }

    /**
     * Fuegt ein Angebot hinzu
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAngebot(
        observe?: 'body',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<PageDtoAngebotDetailsDto>;
    public addAngebot(
        observe?: 'response',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpResponse<PageDtoAngebotDetailsDto>>;
    public addAngebot(
        observe?: 'events',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpEvent<PageDtoAngebotDetailsDto>>;
    public addAngebot(
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<any> {
        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined =
            options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['text/plain', 'application/json']);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/angebot/cmd/add`;
        const {basePath, withCredentials} = this.configuration;
        return this.httpClient.request<PageDtoAngebotDetailsDto>('post', `${basePath}${localVarPath}`, {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            ...(withCredentials ? {withCredentials} : {}),
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }

    /**
     * Aendert ein Angebot
     * @param changeAngebotQueryDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeAngebot(
        changeAngebotQueryDto: ChangeAngebotQueryDto,
        observe?: 'body',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<PageDtoAngebotDetailsDto>;
    public changeAngebot(
        changeAngebotQueryDto: ChangeAngebotQueryDto,
        observe?: 'response',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpResponse<PageDtoAngebotDetailsDto>>;
    public changeAngebot(
        changeAngebotQueryDto: ChangeAngebotQueryDto,
        observe?: 'events',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpEvent<PageDtoAngebotDetailsDto>>;
    public changeAngebot(
        changeAngebotQueryDto: ChangeAngebotQueryDto,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<any> {
        if (changeAngebotQueryDto === null || changeAngebotQueryDto === undefined) {
            throw new Error('Required parameter changeAngebotQueryDto was null or undefined when calling changeAngebot.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined =
            options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['text/plain', 'application/json']);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/angebot/cmd/change`;
        const {basePath, withCredentials} = this.configuration;
        return this.httpClient.request<PageDtoAngebotDetailsDto>('post', `${basePath}${localVarPath}`, {
            context: localVarHttpContext,
            body: changeAngebotQueryDto,
            responseType: <any>responseType_,
            ...(withCredentials ? {withCredentials} : {}),
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }

    /**
     * Liefert alle Angebote
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAngebote(
        observe?: 'body',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<PageDtoAngebotDetailsDto>;
    public listAngebote(
        observe?: 'response',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpResponse<PageDtoAngebotDetailsDto>>;
    public listAngebote(
        observe?: 'events',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpEvent<PageDtoAngebotDetailsDto>>;
    public listAngebote(
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<any> {
        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined =
            options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['text/plain', 'application/json']);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/angebot/cmd/list`;
        const {basePath, withCredentials} = this.configuration;
        return this.httpClient.request<PageDtoAngebotDetailsDto>('post', `${basePath}${localVarPath}`, {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            ...(withCredentials ? {withCredentials} : {}),
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }

    /**
     * Suche nach Angeboten
     * @param searchAngebotQueryDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAngebot(
        searchAngebotQueryDto: SearchAngebotQueryDto,
        observe?: 'body',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<PageDtoAngebotDetailsDto>;
    public searchAngebot(
        searchAngebotQueryDto: SearchAngebotQueryDto,
        observe?: 'response',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpResponse<PageDtoAngebotDetailsDto>>;
    public searchAngebot(
        searchAngebotQueryDto: SearchAngebotQueryDto,
        observe?: 'events',
        reportProgress?: boolean,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<HttpEvent<PageDtoAngebotDetailsDto>>;
    public searchAngebot(
        searchAngebotQueryDto: SearchAngebotQueryDto,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {httpHeaderAccept?: 'text/plain' | 'application/json'; context?: HttpContext; transferCache?: boolean},
    ): Observable<any> {
        if (searchAngebotQueryDto === null || searchAngebotQueryDto === undefined) {
            throw new Error('Required parameter searchAngebotQueryDto was null or undefined when calling searchAngebot.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined =
            options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['text/plain', 'application/json']);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/angebot/cmd/search`;
        const {basePath, withCredentials} = this.configuration;
        return this.httpClient.request<PageDtoAngebotDetailsDto>('post', `${basePath}${localVarPath}`, {
            context: localVarHttpContext,
            body: searchAngebotQueryDto,
            responseType: <any>responseType_,
            ...(withCredentials ? {withCredentials} : {}),
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }
}
